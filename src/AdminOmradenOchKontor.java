
import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *test
 * @author Erik
 */
public class AdminOmradenOchKontor extends javax.swing.JFrame {
//test erik
    //test scotte
    private InfDB idb;

    /**
     * Creates new form AdminOmradenOchKontor
     */
    public AdminOmradenOchKontor(InfDB idb) {
        initComponents();
        this.idb = idb;
        fylliCbOmrade();
        fylliCBkontor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbOmrade = new javax.swing.JComboBox<>();
        lblOmråde = new javax.swing.JLabel();
        lblAgentID = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbAgent = new javax.swing.JComboBox<>();
        lblAgentID1 = new javax.swing.JLabel();
        cbAgentKontor = new javax.swing.JComboBox<>();
        cbKontor = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnAndraKontor = new javax.swing.JButton();
        btnAndraOmrade = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbOmrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOmradeActionPerformed(evt);
            }
        });

        lblOmråde.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblOmråde.setForeground(new java.awt.Color(51, 51, 51));
        lblOmråde.setText("Område");

        lblAgentID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAgentID.setForeground(new java.awt.Color(51, 51, 51));
        lblAgentID.setText("Agent-ID på områdeschef:");

        btnTillbaka.setBackground(new java.awt.Color(51, 51, 51));
        btnTillbaka.setForeground(new java.awt.Color(255, 255, 255));
        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/MiBlogga3.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Områden och kontor");

        cbAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAgentActionPerformed(evt);
            }
        });

        lblAgentID1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAgentID1.setForeground(new java.awt.Color(51, 51, 51));
        lblAgentID1.setText("Agent-ID på kontorschef:");

        cbKontor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKontorActionPerformed(evt);
            }
        });

        jLabel3.setText("Kontor");

        btnAndraKontor.setBackground(new java.awt.Color(51, 51, 51));
        btnAndraKontor.setForeground(new java.awt.Color(255, 255, 255));
        btnAndraKontor.setText("Ändra");
        btnAndraKontor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraKontorActionPerformed(evt);
            }
        });

        btnAndraOmrade.setBackground(new java.awt.Color(51, 51, 51));
        btnAndraOmrade.setForeground(new java.awt.Color(255, 255, 255));
        btnAndraOmrade.setText("Ändra");
        btnAndraOmrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraOmradeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnTillbaka)
                                .addGap(18, 476, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(36, 36, 36)))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAgentID)
                            .addComponent(lblOmråde, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbAgent, 0, 90, Short.MAX_VALUE)
                                    .addComponent(cbOmrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbKontor, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(107, 107, 107))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblAgentID1)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbAgentKontor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAndraOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAndraKontor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOmråde, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbKontor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAgentID, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAgentID1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAgentKontor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAndraKontor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAndraOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Väljer område och autofyller ansvarig agent för valt område.
    private void cbOmradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOmradeActionPerformed
        try {
            if (cbAgent.getItemCount() == 0 && cbAgentKontor.getItemCount() == 0) {
                fylliCBagentID();
            }
            String omrade = cbOmrade.getItemAt(cbOmrade.getSelectedIndex());
            String fraga = "SELECT Omrades_ID from omrade WHERE Benamning = '" + omrade + "';";
            String omradeID = idb.fetchSingle(fraga);
            String fraga1 = "SELECT Agent_ID FROM omradeschef WHERE omrade = '" + omradeID + "';";
            String agentID = idb.fetchSingle(fraga1);

            boolean agentFound = false;
            int agentPosition = 0;
            int count = cbAgent.getItemCount();
            for (int i = 0; i < cbAgent.getItemCount() && !agentFound; i++) {
                String agent = cbAgent.getItemAt(i);
                if (agent.equals(agentID)) {
                    agentFound = true;
                } else {
                    agentPosition++;
                }
            }
            if(agentPosition != cbAgent.getItemCount()){
            cbAgent.setSelectedIndex(agentPosition);
            }
            else{
                cbAgent.setSelectedIndex(cbAgent.getItemCount()-1);
            }

        } catch (InfException ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        }

    }//GEN-LAST:event_cbOmradeActionPerformed

    //avslutar en pågående sida och öppnar en föregående
    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        dispose();
        new InloggadAdmin(idb).setVisible(true);
    }//GEN-LAST:event_btnTillbakaActionPerformed

    private void cbAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAgentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAgentActionPerformed

    // väljer kontor och autofyller ansvarig agent för angivet kontor.
    private void cbKontorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKontorActionPerformed
        try{
        String kontor = cbKontor.getItemAt(cbKontor.getSelectedIndex());
        String fraga1 = "SELECT Agent_ID FROM kontorschef WHERE Kontorsbeteckning = '" + kontor + "';";
        String agentID = idb.fetchSingle(fraga1);

        boolean agentFound = false;
        int agentPosition = 0;

        for (int i = 0; i < cbAgent.getItemCount() && !agentFound; i++) {
            String agent = cbAgent.getItemAt(i);
            if (agent.equals(agentID)) {
                agentFound = true;
            } else {
                agentPosition++;
            }
        }
        cbAgentKontor.setSelectedIndex(agentPosition);

        }
    catch (InfException ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
        System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
    }

    }//GEN-LAST:event_cbKontorActionPerformed

    // en knapp som uppdaterar/ändrar områdeschefen i valt område med vald agent.
    private void btnAndraOmradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraOmradeActionPerformed
        try{
        String agent = cbAgent.getItemAt(cbAgent.getSelectedIndex());
        String omrade = cbOmrade.getItemAt(cbOmrade.getSelectedIndex());
        String omradeUtanChef = idb.fetchSingle("SELECT Benamning from omrade where omrade.Omrades_ID not in (SELECT omrade from omradeschef);");
        String fraga = "SELECT Omrades_ID from omrade WHERE benamning = '" + omrade + "';";
        String omradeID = idb.fetchSingle(fraga);
        String fraga2 = "UPDATE omradeschef SET Agent_ID = '" + agent + "' WHERE Omrade = '" + omradeID + "';";
        String fraga3 = "INSERT INTO omradeschef VALUES (" + agent + ", " + omradeID + ");";
        if(!omrade.equals(omradeUtanChef)){
        idb.update(fraga2);
        JOptionPane.showMessageDialog(rootPane, "En ny områdeschef har tilldelats!");
        dispose();
        new AdminOmradenOchKontor(idb).setVisible(true);
        }  
        else {
            idb.insert(fraga3);
        JOptionPane.showMessageDialog(rootPane, "En ny områdeschef har tilldelats!");
        dispose();
        new AdminOmradenOchKontor(idb).setVisible(true);
        }
        }
        catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        }
    }//GEN-LAST:event_btnAndraOmradeActionPerformed

    // en knapp som uppdaterar/ändrar kontorschef i valt område med vald agent
    private void btnAndraKontorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraKontorActionPerformed
       try{
        String agent = cbAgentKontor.getItemAt(cbAgentKontor.getSelectedIndex());
        String kontor = cbKontor.getItemAt(cbKontor.getSelectedIndex());
        String fraga = "UPDATE kontorschef SET Agent_ID = '" + agent + "' WHERE kontorsbeteckning = '" + kontor + "';";
        idb.update(fraga);
        JOptionPane.showMessageDialog(rootPane, "En ny kontorsschef har tilldelats!");
        dispose();
        new AdminOmradenOchKontor(idb).setVisible(true);
       } catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        }
    }//GEN-LAST:event_btnAndraKontorActionPerformed

    // fyller i comboboxen för kontor
    private void fylliCBkontor() {
        try {
            String fraga = "SELECT Kontorsbeteckning FROM kontorschef";

            ArrayList<String> allaKontor;

            allaKontor = idb.fetchColumn(fraga);

            for (String kontor : allaKontor) {
                cbKontor.addItem(kontor);
            }
        } catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        }
    }

    // fyller i comboboxen för Agent-id
    private void fylliCBagentID() {
        try {
            String fraga = "SELECT Agent_ID from agent ORDER BY Agent_ID ASC;";

            ArrayList<String> allaAgenter;

            allaAgenter = idb.fetchColumn(fraga);

            for (String namn : allaAgenter) {
                cbAgent.addItem(namn);
                cbAgentKontor.addItem(namn);
            }
            cbAgent.addItem("Null");

        } catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        }
    }

    // fyller i comboboxen för område
    public void fylliCbOmrade() {
        String fraga = "SELECT benamning from omrade";

        ArrayList<String> allaOmraden;

        try {

            allaOmraden = idb.fetchColumn(fraga);

            for (String namn : allaOmraden) {
                cbOmrade.addItem(namn);
            }

        } catch (InfException ettUndantag) {
            JOptionPane.showMessageDialog(null, "Databasfel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
        } catch (Exception ettUndantag) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ettUndantag.getMessage());
}

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndraKontor;
    private javax.swing.JButton btnAndraOmrade;
    private javax.swing.JButton btnTillbaka;
    private javax.swing.JComboBox<String> cbAgent;
    private javax.swing.JComboBox<String> cbAgentKontor;
    private javax.swing.JComboBox<String> cbKontor;
    private javax.swing.JComboBox<String> cbOmrade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAgentID;
    private javax.swing.JLabel lblAgentID1;
    private javax.swing.JLabel lblOmråde;
    // End of variables declaration//GEN-END:variables
}
